setwd("E:/Project")   #setting the working directory

dat.1980 = read.csv('1980.csv', header = TRUE, row.names = 1)    #data for 1980

dat.1990 = read.csv('1990.csv', header = TRUE, row.names = 1)    #data for 1990

dat.2000 = read.csv('2000.csv', header = TRUE, row.names = 1)    #data for 2000

dat.2010 = read.csv('2010.csv', header = TRUE, row.names = 1)    data for 2010

#dat.1980[is.na(dat.1980)] = 0                               #changing NAs to 0 as a quick work around?
#dat.2010[is.na(dat.2010)] = 0

data1 = dat.1980    #easier to write
data2 = dat.1990
data3 = dat.2000
data4 = dat.2010

is.factor(dat.1980$World.Bank.Regions)     #making one of the variables a factor variable


#--------------------------

num1 = sapply(data1, is.numeric)                              #scaling numeric values
data1[num1] = lapply(data1[num1], scale)

num2 = sapply(data2, is.numeric)                              #scaling numeric values
data2[num2] = lapply(data2[num2], scale)

num3 = sapply(data3, is.numeric)                              #scaling numeric values
data3[num3] = lapply(data3[num3], scale)

num4 = sapply(data4, is.numeric)                              #scaling numeric values
data4[num4] = lapply(data4[num4], scale)

#-----Performing PCA on the different years-------------

pca.1980 = princomp(data1[num1], cor = T)                   
pca.1990 = princomp(data2[num2], cor = T)
pca.2000 = princomp(data3[num3], cor = T)
pca.2010 = princomp(data4[num4], cor = T)


summary(pca.1980)
summary(pca.1990)
summary(pca.2000)
summary(pca.2010)

#plotting the PCA to look at how many principal components should be used (using elbow method)

plot(pca.1980, type = 'l')
plot(pca.1990, type = 'l')
plot(pca.2000, type = 'l')
plot(pca.2010, type = 'l')



#----------PCA for the different years-------------------

pc1 = prcomp(data1[num1])

comp1 = data.frame(pc1$x[,1:4])

plot(comp1, pch=16, col=rgb(0,0,0,0.5))

#1980 testing: for only 2 dimensions for visualisation
pc1.1 = prcomp(data1[num1])

comp1.1 = data.frame(pc1.1$x[,1:2])

plot(comp1.1, pch=16, col=rgb(0,0,0,0.5))


#----------------

pc2 = prcomp(data2[num2])

comp2 = data.frame(pc2$x[,1:4])

plot(comp2, pch=16, col=rgb(0,0,0,0.5))

#1990 testing: for only 2 dimensions for visualisation
pc2.1 = prcomp(data2[num2])

comp2.1 = data.frame(pc2.1$x[,1:2])

plot(comp2.1, pch=16, col=rgb(0,0,0,0.5))
#----------------

pc3 = prcomp(data3[num3])

comp3 = data.frame(pc3$x[,1:4])

plot(comp3, pch=16, col=rgb(0,0,0,0.5))

#2000 testing: for only 2 dimensions for visualisation
pc3.1 = prcomp(data3[num3])

comp3.1 = data.frame(pc3.1$x[,1:2])

plot(comp3.1, pch=16, col=rgb(0,0,0,0.5))
#----------------

pc4 = prcomp(data4[num4])

comp4 = data.frame(pc4$x[,1:4])

plot(comp4, pch=16, col=rgb(0,0,0,0.5))

#2010 testing: for only 2 dimensions for visualisation
pc4.1 = prcomp(data4[num4])

comp4.1 = data.frame(pc4.1$x[,1:2])

plot(comp4.1, pch=16, col=rgb(0,0,0,0.5))


#------------------------------euclidean distance matrix-------------------------------------
library(factoextra)

dist.eucl = dist(comp1, method = "euclidean")
fviz_dist(dist.eucl)
#all countries



#---------determine number of clusters: calculating the within cluster sum of squares (elbow method)
wss1 = (nrow(data1)-1)*sum(apply(data1,2,var))
for (i in 2:32) wss1[i] = sum(kmeans(data1,
                                     centers=i)$withinss)
plot(1:32, wss1, type="b", xlab="Number of Clusters", ylab="sum of squares")



#-------------------------------------------------------------------------

#install.packages('RColorBrewer')
#install.packages('scales')
install.packages('NbClust')

#----------number of clusters-------
library("factoextra")
fviz_nbclust(comp1, kmeans, method = "gap_stat")

fviz_nbclust(comp1, kmeans, method = "silhouette")+ labs(subtitle = "Silhouette method")

fviz_nbclust(comp1, kmeans, nstart = 25, method = "gap_stat", nboot = 50)+ labs(subtitle = "Gap statistic method")

library("factoextra") 
library(NbClust) 
nb = NbClust(comp1, distance = "euclidean", min.nc = 2, max.nc = 20, method = "kmeans")
fviz_nbclust(nb)


